@model TaskChecker.Web.Models.ExerciseViewModel

@{
    /**/

    ViewBag.Title = "Exercise";
    Layout = "../Shared/_Layout.cshtml";
    var exercise = Model.Exercise;
}

<h3>Exercise - <strong>@Model.Exercise.Name</strong></h3>

<div>
    <dl class="dl-horizontal">

        <dt>
            @Html.DisplayNameFor(model => model.Exercise.Description)
        </dt>

        <dd style="white-space: pre-wrap;">@Model.Exercise.Description</dd>

        <dt>
            @Html.DisplayName("Count Tests")
        </dt>

        <dd>
            @Model.Exercise.ExerciseTests.Count
        </dd>
        <dt>
            @Html.DisplayName("Max Mark")
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Exercise.Value)
        </dd>

        <dt>
            @Html.DisplayName("Your Mark")
        </dt>

        <dd>
            @(Model.ExerciseResult == null ? 0 : Model.ExerciseResult.Mark)
        </dd>
    </dl>
</div>
<p>
    @Html.ActionLink("Back to Lab Work", "LabWork", "Home", new { Id = Model.Exercise.LabWork.Id }, null)
</p>

@if (Model.Exercise.ExerciseTests.Count > 0)
{
    <h4>You can Submit Answer below:</h4>

    <div class="form-horizontal">
        <input type="hidden" id="ExerciseId" name="ExerciseId" value="@Model.Exercise.Id" />
        <div class="form-group">
            @Html.LabelFor(model => exercise.TypeName, "Type Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(
                    model => exercise.TypeName,
                    null,
                    "TypeName",
                    new {
                        htmlAttributes = new {
                            @class = "form-control",
                            data_val = "true",
                            data_val_required = "The Type Name field is required."
                        }
                    })
                @Html.ValidationMessage("TypeName", "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => exercise.MethodName, "Method Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(
                    model => exercise.MethodName,
                    null,
                    "MethodName",
                    new {
                        htmlAttributes = new {
                            @class = "form-control",
                            data_val = "true",
                            data_val_required = "The Method Name field is required."
                        }
                    })
                @Html.ValidationMessage("MethodName", "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group" style="height: 400px">
            @Html.Label("Content", "Source Code", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div id="sourceCode" style="position: absolute; top: 0; left: 0; width: 100%; height: 400px;"></div>
            </div>
            <div class="clearfix"></div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="submit" type="submit" value="Check Answer" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<h4>Your previous answers:</h4>

<table class="table">
    <tr>
        <th>
            @Html.DisplayName("Id")
        </th>
        <th>
            @Html.DisplayName("Created")
        </th>
        <th>
            @Html.DisplayName("Tested")
        </th>
        <th>
            @Html.DisplayName("Final")
        </th>
        <th>
            @Html.DisplayName("Score")
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model.Submissions)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Created)
            </td>
            <td>
                @(item.IsTested ? "Yes" : "No")
            </td>
            <td>
                @(item.IsFinal ? "Yes" : "No")
            </td>
            <td>
                @($"{item.TestResults.Count(x => x.IsPassed)}/{item.TestResults.Count}")
            </td>
            <td>
                @Html.ActionLink("Details", "Submission", "Home", new { id = item.Id }, null)
            </td>
        </tr>
    }

</table>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/ace")

    <script>
        $('#submit').on('click', function (event) {
            event.preventDefault();

            var data = {
                exerciseId: $('#ExerciseId').val(),
                content: window.sourceCode.getValue(),
                typeName: $('#TypeName').val(),
                methodName: $('#MethodName').val()
            };

            $.ajax({
                type: "POST",
                url: '@Url.Action("ExerciseSubmission", "Home")',
                content: "application/json; charset=utf-8",
                dataType: "json",
                data: data,
                success: function (response) {
                    window.location.href = response;
                },
                error: function (xhr, textStatus, errorThrown) {
                    // TODO: Show error
                }
            });
        });
    </script>

    <script>
        window.sourceCode = ace.edit("sourceCode");
        window.sourceCode.setOptions({
            fixedWidthGutter: true,
            showPrintMargin: false
        });
        window.sourceCode.setTheme("ace/theme/textmate");
        window.sourceCode.session.setMode("ace/mode/csharp");
    </script>
}